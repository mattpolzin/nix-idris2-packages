
name: Nix Build And Cache

on:
  push:
    branches:
      - main
  pull_request:
  repository_dispatch:
    types: [update-package-set]
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'

jobs:
  update-package-set:
    if: github.event_name == 'schedule' || github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch'

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Checkout
        uses: actions/checkout@v4
      - uses: cachix/cachix-action@v14
        with:
          name: gh-nix-idris2-packages
          # If you chose API tokens for write access OR if you have a private cache
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Update Package Set
        run: ./update.sh
      - name: Cache Updates
        uses: actions/cache/save@v4
        with:
          path: |
            flake.lock
            idris2-pack-db/idris2.json
            idris2-pack-db/pack-db-resolved.json
          key: ${{ runner.os }}-${{ hashFiles('flake.lock') }}
      - name: Commit
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'Matt Polzin'
          git config --global user.email 'matt.polzin@gmail.com'
          git commit -am 'CI: update package set' || echo 'No changes to commit'
          git push

  nix-build-x86_64-linux:
    needs: update-package-set
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Checkout
        uses: actions/checkout@v4
      - uses: cachix/cachix-action@v14
        with:
          name: gh-nix-idris2-packages
          # If you chose API tokens for write access OR if you have a private cache
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Restore Cache 
        uses: actions/cache/restore@v4
        with:
          path: |
            flake.lock
            idris2-pack-db/idris2.json
            idris2-pack-db/pack-db-resolved.json
          key: ${{ runner.os }}-${{ hashFiles('flake.lock') }}
      - name: Build
        run: NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1 NIXPKGS_ALLOW_BROKEN=1 nix-build --no-out-link --keep-going ./build-all.nix
      - name: Ensure Flake idris2 & idris2LSP
        run: |
          nix build .#idris2
          nix build .#idris2Lsp
      - name: Build Examples
        run: cd examples/non-flake && nix-build

  nix-build-x86_64-darwin:
    needs: update-package-set
    if: always()
    runs-on: macos-13

    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Checkout
        uses: actions/checkout@v4
      - uses: cachix/cachix-action@v14
        with:
          name: gh-nix-idris2-packages
          # If you chose API tokens for write access OR if you have a private cache
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Restore Cache 
        uses: actions/cache/restore@v4
        with:
          path: |
            flake.lock
            idris2-pack-db/idris2.json
            idris2-pack-db/pack-db-resolved.json
          key: ${{ runner.os }}-${{ hashFiles('flake.lock') }}
      - name: Build
        run: NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1 NIXPKGS_ALLOW_BROKEN=1 nix-build --no-out-link --keep-going ./build-all.nix
      - name: Ensure Flake idris2 & idris2LSP
        run: |
          nix build .#idris2
          nix build .#idris2Lsp

  nix-build-aarch64-darwin:
    needs: update-package-set
    if: always()
    runs-on: macos-14

    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Checkout
        uses: actions/checkout@v4
      - uses: cachix/cachix-action@v14
        with:
          name: gh-nix-idris2-packages
          # If you chose API tokens for write access OR if you have a private cache
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Restore Cache 
        uses: actions/cache/restore@v4
        with:
          path: |
            flake.lock
            idris2-pack-db/idris2.json
            idris2-pack-db/pack-db-resolved.json
          key: ${{ runner.os }}-${{ hashFiles('flake.lock') }}
      - name: Build
        run: NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1 NIXPKGS_ALLOW_BROKEN=1 nix-build --no-out-link --keep-going ./build-all.nix
      - name: Ensure Flake idris2 & idris2LSP
        run: |
          nix build .#idris2
          nix build .#idris2Lsp
